<?php

namespace backend\models;

use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "dish".
 *
 * @property integer $id
 * @property string $title_ua
 * @property string $title_ru
 * @property string $image_dish
 * @property string $type_dish_ua
 * @property string $type_dish_ru
 * @property integer $preparation_time
 * @property integer $cooking_time
 * @property integer $count_person
 * @property string $ingridients_ua
 * @property string $ingridients_ru
 * @property string $instrucrions_ua
 * @property string $instrucrions_ru
 */
class Dish extends Img
{

    public $image_dish;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'dish';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['image_dish'], 'file', 'extensions' => 'png, jpg, svg, gif'],
            [['title_ua', 'title_ru',  'type_dish_ua', 'type_dish_ru'], 'required'],
            [['preparation_time', 'cooking_time', 'count_person'], 'integer'],
            [['ingridients_ua', 'ingridients_ru', 'instrucrions_ua', 'instrucrions_ru'], 'string'],
            [['title_ua', 'title_ru'], 'string', 'max' => 100],
            [['type_dish_ua', 'type_dish_ru', ], 'string', 'max' => 30],
            [['symbol' ], 'string', 'max' => 100],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title_ua' => 'Название блюда [Ua]',
            'title_ru' => 'Название блюда [Ru]',
            'image_dish' => 'Картинка:',
            'type_dish_ua' => 'Тип блюда [Ua]',
            'type_dish_ru' => 'Тип блюда [Ru]',
            'preparation_time' => 'Время подготовки [Мин.]',
            'cooking_time' => 'Время приготовления [Мин.]',
            'count_person' => 'Количество персон',
            'ingridients_ua' => 'Ingridients Ua',
            'ingridients_ru' => 'Ingridients Ru',
            'instrucrions_ua' => 'Инструкция [Ua]',
            'instrucrions_ru' => 'Инструкция [Ru]',
            'symbol' => 'Ссылка на блюдо(Поле можно оставить пустым, оно заполниться автоматически)',
        ];
    }

    public function beforeSave($insert)
    {
        $this->image_dish = UploadedFile::getInstance( $this, 'image_dish');
        if($this->images==null){
            $this->images = [
                "image_dish"=>"",

            ];
            $this->images = json_encode($this->images);
            $this->images = json_decode($this->images);
        }

        if($this->image_dish){
            $name =  $this->generateName() . '.' . $this->image_dish->extension;
            $this->image_dish->saveAs(Yii::getAlias("@frontend").'/web/images/' .$name);
            $this->images->image_dish = $name;
        }


        $this->images = json_encode($this->images);

        if($this->symbol == ''){
            $this->symbol = $this->str2url($this->title_ua);
        } else {
            $this->symbol = trim($this->symbol);
        }


        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->images = json_decode($this->images);
        if(Yii::$app->language=='ru'){
            $this->title_ua = $this->title_ru;
            
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function getProductDish()
    {
        return $this->hasMany(ProductDish::className(),['id_dish' => 'id']);
    }

   private function rus2translit($string) {
        $converter = array(
            'а' => 'a',   'б' => 'b',   'в' => 'v',
            'г' => 'g',   'д' => 'd',   'е' => 'e',
            'ё' => 'e',   'ж' => 'zh',  'з' => 'z',
            'и' => 'i',   'й' => 'y',   'к' => 'k',
            'л' => 'l',   'м' => 'm',   'н' => 'n',
            'о' => 'o',   'п' => 'p',   'р' => 'r',
            'с' => 's',   'т' => 't',   'у' => 'u',
            'ф' => 'f',   'х' => 'h',   'ц' => 'c',
            'ч' => 'ch',  'ш' => 'sh',  'щ' => 'sch',
            'ь' => '\'',  'ы' => 'y',   'ъ' => '\'',
            'э' => 'e',   'ю' => 'yu',  'я' => 'ya',

            'ґ' => 'g',   'є' => 'ie',  'ї' => 'yi',
            'і' => 'i',

            'А' => 'A',   'Б' => 'B',   'В' => 'V',
            'Г' => 'G',   'Д' => 'D',   'Е' => 'E',
            'Ё' => 'E',   'Ж' => 'Zh',  'З' => 'Z',
            'И' => 'I',   'Й' => 'Y',   'К' => 'K',
            'Л' => 'L',   'М' => 'M',   'Н' => 'N',
            'О' => 'O',   'П' => 'P',   'Р' => 'R',
            'С' => 'S',   'Т' => 'T',   'У' => 'U',
            'Ф' => 'F',   'Х' => 'H',   'Ц' => 'C',
            'Ч' => 'Ch',  'Ш' => 'Sh',  'Щ' => 'Sch',
            'Ь' => '\'',  'Ы' => 'Y',   'Ъ' => '\'',
            'Э' => 'E',   'Ю' => 'Yu',  'Я' => 'Ya',

            'Ґ' => 'G',   'Є'=> 'Ye',   'Ї'=> 'Yi',
            'І' => 'I',

        );
        return strtr($string, $converter);
    }

   protected function str2url($str) {
        // переводим в транслит
        $str = $this->rus2translit($str);
        // в нижний регистр
        $str = strtolower($str);
        // заменям все ненужное нам на "-"
        $str = preg_replace('~[^-a-z0-9_]+~u', '-', $str);
        // удаляем начальные и конечные '-'
        $str = trim($str, "-");

        return $str;
    }


}
